generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String @unique
  password String
  role UserRole @default(USER)
  verified DateTime?

  provider String?
  providerId String?

  cart Cart?
  orders Order[]
  verificationCode VerficationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  imageUrl    String
  typeId      Int
  thcLevel    String
  description String
  terpeneId   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  CartItem    CartItem[]
  type        Type     @relation(fields: [typeId], references: [id])
  terpene     Terpene? @relation(fields: [terpeneId], references: [id])
  effects     ProductEffect[]
}

model Terpene {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Type {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Effect {
  id   Int    @id @default(autoincrement())
  name String

  ProductEffect ProductEffect[]
}

model ProductEffect {
  id        Int     @id @default(autoincrement())
  productId Int
  effectId  Int
  value     Int
  product   Product @relation(fields: [productId], references: [id])
  effect    Effect  @relation(fields: [effectId], references: [id])
}

model Cart {
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int? @unique

  items CartItem[]

  token String?

  totalAmount Float @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  product Product @relation(fields: [productId], references: [id])
  productId Int

  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int?

  token String

  totalAmount Float
  status OrderStatus @default(PENDING)
  paymentId String?

  items Json

  fullname String
  address String
  email String
  phone String
  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerficationCode {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId Int @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}